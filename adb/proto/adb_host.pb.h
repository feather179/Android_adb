// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: adb_host.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_adb_5fhost_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_adb_5fhost_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_adb_5fhost_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_adb_5fhost_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_adb_5fhost_2eproto;
namespace adb {
namespace proto {
class AdbServerStatus;
struct AdbServerStatusDefaultTypeInternal;
extern AdbServerStatusDefaultTypeInternal _AdbServerStatus_default_instance_;
class Device;
struct DeviceDefaultTypeInternal;
extern DeviceDefaultTypeInternal _Device_default_instance_;
class Devices;
struct DevicesDefaultTypeInternal;
extern DevicesDefaultTypeInternal _Devices_default_instance_;
}  // namespace proto
}  // namespace adb
PROTOBUF_NAMESPACE_OPEN
template<> ::adb::proto::AdbServerStatus* Arena::CreateMaybeMessage<::adb::proto::AdbServerStatus>(Arena*);
template<> ::adb::proto::Device* Arena::CreateMaybeMessage<::adb::proto::Device>(Arena*);
template<> ::adb::proto::Devices* Arena::CreateMaybeMessage<::adb::proto::Devices>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace adb {
namespace proto {

enum AdbServerStatus_UsbBackend : int {
  AdbServerStatus_UsbBackend_UNKNOWN_USB = 0,
  AdbServerStatus_UsbBackend_NATIVE = 1,
  AdbServerStatus_UsbBackend_LIBUSB = 2,
  AdbServerStatus_UsbBackend_AdbServerStatus_UsbBackend_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  AdbServerStatus_UsbBackend_AdbServerStatus_UsbBackend_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool AdbServerStatus_UsbBackend_IsValid(int value);
constexpr AdbServerStatus_UsbBackend AdbServerStatus_UsbBackend_UsbBackend_MIN = AdbServerStatus_UsbBackend_UNKNOWN_USB;
constexpr AdbServerStatus_UsbBackend AdbServerStatus_UsbBackend_UsbBackend_MAX = AdbServerStatus_UsbBackend_LIBUSB;
constexpr int AdbServerStatus_UsbBackend_UsbBackend_ARRAYSIZE = AdbServerStatus_UsbBackend_UsbBackend_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AdbServerStatus_UsbBackend_descriptor();
template<typename T>
inline const std::string& AdbServerStatus_UsbBackend_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AdbServerStatus_UsbBackend>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AdbServerStatus_UsbBackend_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AdbServerStatus_UsbBackend_descriptor(), enum_t_value);
}
inline bool AdbServerStatus_UsbBackend_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AdbServerStatus_UsbBackend* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AdbServerStatus_UsbBackend>(
    AdbServerStatus_UsbBackend_descriptor(), name, value);
}
enum AdbServerStatus_MdnsBackend : int {
  AdbServerStatus_MdnsBackend_UNKNOWN_MDNS = 0,
  AdbServerStatus_MdnsBackend_BONJOUR = 1,
  AdbServerStatus_MdnsBackend_OPENSCREEN = 2,
  AdbServerStatus_MdnsBackend_AdbServerStatus_MdnsBackend_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  AdbServerStatus_MdnsBackend_AdbServerStatus_MdnsBackend_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool AdbServerStatus_MdnsBackend_IsValid(int value);
constexpr AdbServerStatus_MdnsBackend AdbServerStatus_MdnsBackend_MdnsBackend_MIN = AdbServerStatus_MdnsBackend_UNKNOWN_MDNS;
constexpr AdbServerStatus_MdnsBackend AdbServerStatus_MdnsBackend_MdnsBackend_MAX = AdbServerStatus_MdnsBackend_OPENSCREEN;
constexpr int AdbServerStatus_MdnsBackend_MdnsBackend_ARRAYSIZE = AdbServerStatus_MdnsBackend_MdnsBackend_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AdbServerStatus_MdnsBackend_descriptor();
template<typename T>
inline const std::string& AdbServerStatus_MdnsBackend_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AdbServerStatus_MdnsBackend>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AdbServerStatus_MdnsBackend_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AdbServerStatus_MdnsBackend_descriptor(), enum_t_value);
}
inline bool AdbServerStatus_MdnsBackend_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AdbServerStatus_MdnsBackend* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AdbServerStatus_MdnsBackend>(
    AdbServerStatus_MdnsBackend_descriptor(), name, value);
}
enum ConnectionState : int {
  ANY = 0,
  CONNECTING = 1,
  AUTHORIZING = 2,
  UNAUTHORIZED = 3,
  NOPERMISSION = 4,
  DETACHED = 5,
  OFFLINE = 6,
  BOOTLOADER = 7,
  DEVICE = 8,
  HOST = 9,
  RECOVERY = 10,
  SIDELOAD = 11,
  RESCUE = 12,
  ConnectionState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ConnectionState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ConnectionState_IsValid(int value);
constexpr ConnectionState ConnectionState_MIN = ANY;
constexpr ConnectionState ConnectionState_MAX = RESCUE;
constexpr int ConnectionState_ARRAYSIZE = ConnectionState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConnectionState_descriptor();
template<typename T>
inline const std::string& ConnectionState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ConnectionState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ConnectionState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ConnectionState_descriptor(), enum_t_value);
}
inline bool ConnectionState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ConnectionState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ConnectionState>(
    ConnectionState_descriptor(), name, value);
}
enum ConnectionType : int {
  UNKNOWN = 0,
  USB = 1,
  SOCKET = 2,
  ConnectionType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ConnectionType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ConnectionType_IsValid(int value);
constexpr ConnectionType ConnectionType_MIN = UNKNOWN;
constexpr ConnectionType ConnectionType_MAX = SOCKET;
constexpr int ConnectionType_ARRAYSIZE = ConnectionType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConnectionType_descriptor();
template<typename T>
inline const std::string& ConnectionType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ConnectionType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ConnectionType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ConnectionType_descriptor(), enum_t_value);
}
inline bool ConnectionType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ConnectionType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ConnectionType>(
    ConnectionType_descriptor(), name, value);
}
// ===================================================================

class Device final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:adb.proto.Device) */ {
 public:
  inline Device() : Device(nullptr) {}
  ~Device() override;
  explicit PROTOBUF_CONSTEXPR Device(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Device(const Device& from);
  Device(Device&& from) noexcept
    : Device() {
    *this = ::std::move(from);
  }

  inline Device& operator=(const Device& from) {
    CopyFrom(from);
    return *this;
  }
  inline Device& operator=(Device&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Device& default_instance() {
    return *internal_default_instance();
  }
  static inline const Device* internal_default_instance() {
    return reinterpret_cast<const Device*>(
               &_Device_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Device& a, Device& b) {
    a.Swap(&b);
  }
  inline void Swap(Device* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Device* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Device* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Device>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Device& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Device& from) {
    Device::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Device* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "adb.proto.Device";
  }
  protected:
  explicit Device(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSerialFieldNumber = 1,
    kBusAddressFieldNumber = 3,
    kProductFieldNumber = 4,
    kModelFieldNumber = 5,
    kDeviceFieldNumber = 6,
    kStateFieldNumber = 2,
    kConnectionTypeFieldNumber = 7,
    kNegotiatedSpeedFieldNumber = 8,
    kMaxSpeedFieldNumber = 9,
    kTransportIdFieldNumber = 10,
  };
  // string serial = 1;
  void clear_serial();
  const std::string& serial() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_serial(ArgT0&& arg0, ArgT... args);
  std::string* mutable_serial();
  PROTOBUF_NODISCARD std::string* release_serial();
  void set_allocated_serial(std::string* serial);
  private:
  const std::string& _internal_serial() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_serial(const std::string& value);
  std::string* _internal_mutable_serial();
  public:

  // string bus_address = 3;
  void clear_bus_address();
  const std::string& bus_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bus_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bus_address();
  PROTOBUF_NODISCARD std::string* release_bus_address();
  void set_allocated_bus_address(std::string* bus_address);
  private:
  const std::string& _internal_bus_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bus_address(const std::string& value);
  std::string* _internal_mutable_bus_address();
  public:

  // string product = 4;
  void clear_product();
  const std::string& product() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_product(ArgT0&& arg0, ArgT... args);
  std::string* mutable_product();
  PROTOBUF_NODISCARD std::string* release_product();
  void set_allocated_product(std::string* product);
  private:
  const std::string& _internal_product() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_product(const std::string& value);
  std::string* _internal_mutable_product();
  public:

  // string model = 5;
  void clear_model();
  const std::string& model() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_model(ArgT0&& arg0, ArgT... args);
  std::string* mutable_model();
  PROTOBUF_NODISCARD std::string* release_model();
  void set_allocated_model(std::string* model);
  private:
  const std::string& _internal_model() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model(const std::string& value);
  std::string* _internal_mutable_model();
  public:

  // string device = 6;
  void clear_device();
  const std::string& device() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_device(ArgT0&& arg0, ArgT... args);
  std::string* mutable_device();
  PROTOBUF_NODISCARD std::string* release_device();
  void set_allocated_device(std::string* device);
  private:
  const std::string& _internal_device() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device(const std::string& value);
  std::string* _internal_mutable_device();
  public:

  // .adb.proto.ConnectionState state = 2;
  void clear_state();
  ::adb::proto::ConnectionState state() const;
  void set_state(::adb::proto::ConnectionState value);
  private:
  ::adb::proto::ConnectionState _internal_state() const;
  void _internal_set_state(::adb::proto::ConnectionState value);
  public:

  // .adb.proto.ConnectionType connection_type = 7;
  void clear_connection_type();
  ::adb::proto::ConnectionType connection_type() const;
  void set_connection_type(::adb::proto::ConnectionType value);
  private:
  ::adb::proto::ConnectionType _internal_connection_type() const;
  void _internal_set_connection_type(::adb::proto::ConnectionType value);
  public:

  // int64 negotiated_speed = 8;
  void clear_negotiated_speed();
  int64_t negotiated_speed() const;
  void set_negotiated_speed(int64_t value);
  private:
  int64_t _internal_negotiated_speed() const;
  void _internal_set_negotiated_speed(int64_t value);
  public:

  // int64 max_speed = 9;
  void clear_max_speed();
  int64_t max_speed() const;
  void set_max_speed(int64_t value);
  private:
  int64_t _internal_max_speed() const;
  void _internal_set_max_speed(int64_t value);
  public:

  // int64 transport_id = 10;
  void clear_transport_id();
  int64_t transport_id() const;
  void set_transport_id(int64_t value);
  private:
  int64_t _internal_transport_id() const;
  void _internal_set_transport_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:adb.proto.Device)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serial_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bus_address_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr product_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_;
    int state_;
    int connection_type_;
    int64_t negotiated_speed_;
    int64_t max_speed_;
    int64_t transport_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_adb_5fhost_2eproto;
};
// -------------------------------------------------------------------

class Devices final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:adb.proto.Devices) */ {
 public:
  inline Devices() : Devices(nullptr) {}
  ~Devices() override;
  explicit PROTOBUF_CONSTEXPR Devices(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Devices(const Devices& from);
  Devices(Devices&& from) noexcept
    : Devices() {
    *this = ::std::move(from);
  }

  inline Devices& operator=(const Devices& from) {
    CopyFrom(from);
    return *this;
  }
  inline Devices& operator=(Devices&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Devices& default_instance() {
    return *internal_default_instance();
  }
  static inline const Devices* internal_default_instance() {
    return reinterpret_cast<const Devices*>(
               &_Devices_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Devices& a, Devices& b) {
    a.Swap(&b);
  }
  inline void Swap(Devices* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Devices* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Devices* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Devices>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Devices& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Devices& from) {
    Devices::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Devices* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "adb.proto.Devices";
  }
  protected:
  explicit Devices(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceFieldNumber = 1,
  };
  // repeated .adb.proto.Device device = 1;
  int device_size() const;
  private:
  int _internal_device_size() const;
  public:
  void clear_device();
  ::adb::proto::Device* mutable_device(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::adb::proto::Device >*
      mutable_device();
  private:
  const ::adb::proto::Device& _internal_device(int index) const;
  ::adb::proto::Device* _internal_add_device();
  public:
  const ::adb::proto::Device& device(int index) const;
  ::adb::proto::Device* add_device();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::adb::proto::Device >&
      device() const;

  // @@protoc_insertion_point(class_scope:adb.proto.Devices)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::adb::proto::Device > device_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_adb_5fhost_2eproto;
};
// -------------------------------------------------------------------

class AdbServerStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:adb.proto.AdbServerStatus) */ {
 public:
  inline AdbServerStatus() : AdbServerStatus(nullptr) {}
  ~AdbServerStatus() override;
  explicit PROTOBUF_CONSTEXPR AdbServerStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AdbServerStatus(const AdbServerStatus& from);
  AdbServerStatus(AdbServerStatus&& from) noexcept
    : AdbServerStatus() {
    *this = ::std::move(from);
  }

  inline AdbServerStatus& operator=(const AdbServerStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline AdbServerStatus& operator=(AdbServerStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AdbServerStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const AdbServerStatus* internal_default_instance() {
    return reinterpret_cast<const AdbServerStatus*>(
               &_AdbServerStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AdbServerStatus& a, AdbServerStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(AdbServerStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AdbServerStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AdbServerStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AdbServerStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AdbServerStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AdbServerStatus& from) {
    AdbServerStatus::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AdbServerStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "adb.proto.AdbServerStatus";
  }
  protected:
  explicit AdbServerStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AdbServerStatus_UsbBackend UsbBackend;
  static constexpr UsbBackend UNKNOWN_USB =
    AdbServerStatus_UsbBackend_UNKNOWN_USB;
  static constexpr UsbBackend NATIVE =
    AdbServerStatus_UsbBackend_NATIVE;
  static constexpr UsbBackend LIBUSB =
    AdbServerStatus_UsbBackend_LIBUSB;
  static inline bool UsbBackend_IsValid(int value) {
    return AdbServerStatus_UsbBackend_IsValid(value);
  }
  static constexpr UsbBackend UsbBackend_MIN =
    AdbServerStatus_UsbBackend_UsbBackend_MIN;
  static constexpr UsbBackend UsbBackend_MAX =
    AdbServerStatus_UsbBackend_UsbBackend_MAX;
  static constexpr int UsbBackend_ARRAYSIZE =
    AdbServerStatus_UsbBackend_UsbBackend_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  UsbBackend_descriptor() {
    return AdbServerStatus_UsbBackend_descriptor();
  }
  template<typename T>
  static inline const std::string& UsbBackend_Name(T enum_t_value) {
    static_assert(::std::is_same<T, UsbBackend>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function UsbBackend_Name.");
    return AdbServerStatus_UsbBackend_Name(enum_t_value);
  }
  static inline bool UsbBackend_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      UsbBackend* value) {
    return AdbServerStatus_UsbBackend_Parse(name, value);
  }

  typedef AdbServerStatus_MdnsBackend MdnsBackend;
  static constexpr MdnsBackend UNKNOWN_MDNS =
    AdbServerStatus_MdnsBackend_UNKNOWN_MDNS;
  static constexpr MdnsBackend BONJOUR =
    AdbServerStatus_MdnsBackend_BONJOUR;
  static constexpr MdnsBackend OPENSCREEN =
    AdbServerStatus_MdnsBackend_OPENSCREEN;
  static inline bool MdnsBackend_IsValid(int value) {
    return AdbServerStatus_MdnsBackend_IsValid(value);
  }
  static constexpr MdnsBackend MdnsBackend_MIN =
    AdbServerStatus_MdnsBackend_MdnsBackend_MIN;
  static constexpr MdnsBackend MdnsBackend_MAX =
    AdbServerStatus_MdnsBackend_MdnsBackend_MAX;
  static constexpr int MdnsBackend_ARRAYSIZE =
    AdbServerStatus_MdnsBackend_MdnsBackend_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MdnsBackend_descriptor() {
    return AdbServerStatus_MdnsBackend_descriptor();
  }
  template<typename T>
  static inline const std::string& MdnsBackend_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MdnsBackend>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MdnsBackend_Name.");
    return AdbServerStatus_MdnsBackend_Name(enum_t_value);
  }
  static inline bool MdnsBackend_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      MdnsBackend* value) {
    return AdbServerStatus_MdnsBackend_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 5,
    kBuildFieldNumber = 6,
    kExecutableAbsolutePathFieldNumber = 7,
    kLogAbsolutePathFieldNumber = 8,
    kOsFieldNumber = 9,
    kUsbBackendFieldNumber = 1,
    kMdnsBackendFieldNumber = 3,
    kUsbBackendForcedFieldNumber = 2,
    kMdnsBackendForcedFieldNumber = 4,
  };
  // string version = 5;
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string build = 6;
  void clear_build();
  const std::string& build() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_build(ArgT0&& arg0, ArgT... args);
  std::string* mutable_build();
  PROTOBUF_NODISCARD std::string* release_build();
  void set_allocated_build(std::string* build);
  private:
  const std::string& _internal_build() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_build(const std::string& value);
  std::string* _internal_mutable_build();
  public:

  // string executable_absolute_path = 7;
  void clear_executable_absolute_path();
  const std::string& executable_absolute_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_executable_absolute_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_executable_absolute_path();
  PROTOBUF_NODISCARD std::string* release_executable_absolute_path();
  void set_allocated_executable_absolute_path(std::string* executable_absolute_path);
  private:
  const std::string& _internal_executable_absolute_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_executable_absolute_path(const std::string& value);
  std::string* _internal_mutable_executable_absolute_path();
  public:

  // string log_absolute_path = 8;
  void clear_log_absolute_path();
  const std::string& log_absolute_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_log_absolute_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_log_absolute_path();
  PROTOBUF_NODISCARD std::string* release_log_absolute_path();
  void set_allocated_log_absolute_path(std::string* log_absolute_path);
  private:
  const std::string& _internal_log_absolute_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_log_absolute_path(const std::string& value);
  std::string* _internal_mutable_log_absolute_path();
  public:

  // string os = 9;
  void clear_os();
  const std::string& os() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_os(ArgT0&& arg0, ArgT... args);
  std::string* mutable_os();
  PROTOBUF_NODISCARD std::string* release_os();
  void set_allocated_os(std::string* os);
  private:
  const std::string& _internal_os() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_os(const std::string& value);
  std::string* _internal_mutable_os();
  public:

  // .adb.proto.AdbServerStatus.UsbBackend usb_backend = 1;
  void clear_usb_backend();
  ::adb::proto::AdbServerStatus_UsbBackend usb_backend() const;
  void set_usb_backend(::adb::proto::AdbServerStatus_UsbBackend value);
  private:
  ::adb::proto::AdbServerStatus_UsbBackend _internal_usb_backend() const;
  void _internal_set_usb_backend(::adb::proto::AdbServerStatus_UsbBackend value);
  public:

  // .adb.proto.AdbServerStatus.MdnsBackend mdns_backend = 3;
  void clear_mdns_backend();
  ::adb::proto::AdbServerStatus_MdnsBackend mdns_backend() const;
  void set_mdns_backend(::adb::proto::AdbServerStatus_MdnsBackend value);
  private:
  ::adb::proto::AdbServerStatus_MdnsBackend _internal_mdns_backend() const;
  void _internal_set_mdns_backend(::adb::proto::AdbServerStatus_MdnsBackend value);
  public:

  // bool usb_backend_forced = 2;
  void clear_usb_backend_forced();
  bool usb_backend_forced() const;
  void set_usb_backend_forced(bool value);
  private:
  bool _internal_usb_backend_forced() const;
  void _internal_set_usb_backend_forced(bool value);
  public:

  // bool mdns_backend_forced = 4;
  void clear_mdns_backend_forced();
  bool mdns_backend_forced() const;
  void set_mdns_backend_forced(bool value);
  private:
  bool _internal_mdns_backend_forced() const;
  void _internal_set_mdns_backend_forced(bool value);
  public:

  // @@protoc_insertion_point(class_scope:adb.proto.AdbServerStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr build_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr executable_absolute_path_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr log_absolute_path_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr os_;
    int usb_backend_;
    int mdns_backend_;
    bool usb_backend_forced_;
    bool mdns_backend_forced_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_adb_5fhost_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Device

// string serial = 1;
inline void Device::clear_serial() {
  _impl_.serial_.ClearToEmpty();
}
inline const std::string& Device::serial() const {
  // @@protoc_insertion_point(field_get:adb.proto.Device.serial)
  return _internal_serial();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Device::set_serial(ArgT0&& arg0, ArgT... args) {
 
 _impl_.serial_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:adb.proto.Device.serial)
}
inline std::string* Device::mutable_serial() {
  std::string* _s = _internal_mutable_serial();
  // @@protoc_insertion_point(field_mutable:adb.proto.Device.serial)
  return _s;
}
inline const std::string& Device::_internal_serial() const {
  return _impl_.serial_.Get();
}
inline void Device::_internal_set_serial(const std::string& value) {
  
  _impl_.serial_.Set(value, GetArenaForAllocation());
}
inline std::string* Device::_internal_mutable_serial() {
  
  return _impl_.serial_.Mutable(GetArenaForAllocation());
}
inline std::string* Device::release_serial() {
  // @@protoc_insertion_point(field_release:adb.proto.Device.serial)
  return _impl_.serial_.Release();
}
inline void Device::set_allocated_serial(std::string* serial) {
  if (serial != nullptr) {
    
  } else {
    
  }
  _impl_.serial_.SetAllocated(serial, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.serial_.IsDefault()) {
    _impl_.serial_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:adb.proto.Device.serial)
}

// .adb.proto.ConnectionState state = 2;
inline void Device::clear_state() {
  _impl_.state_ = 0;
}
inline ::adb::proto::ConnectionState Device::_internal_state() const {
  return static_cast< ::adb::proto::ConnectionState >(_impl_.state_);
}
inline ::adb::proto::ConnectionState Device::state() const {
  // @@protoc_insertion_point(field_get:adb.proto.Device.state)
  return _internal_state();
}
inline void Device::_internal_set_state(::adb::proto::ConnectionState value) {
  
  _impl_.state_ = value;
}
inline void Device::set_state(::adb::proto::ConnectionState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:adb.proto.Device.state)
}

// string bus_address = 3;
inline void Device::clear_bus_address() {
  _impl_.bus_address_.ClearToEmpty();
}
inline const std::string& Device::bus_address() const {
  // @@protoc_insertion_point(field_get:adb.proto.Device.bus_address)
  return _internal_bus_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Device::set_bus_address(ArgT0&& arg0, ArgT... args) {
 
 _impl_.bus_address_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:adb.proto.Device.bus_address)
}
inline std::string* Device::mutable_bus_address() {
  std::string* _s = _internal_mutable_bus_address();
  // @@protoc_insertion_point(field_mutable:adb.proto.Device.bus_address)
  return _s;
}
inline const std::string& Device::_internal_bus_address() const {
  return _impl_.bus_address_.Get();
}
inline void Device::_internal_set_bus_address(const std::string& value) {
  
  _impl_.bus_address_.Set(value, GetArenaForAllocation());
}
inline std::string* Device::_internal_mutable_bus_address() {
  
  return _impl_.bus_address_.Mutable(GetArenaForAllocation());
}
inline std::string* Device::release_bus_address() {
  // @@protoc_insertion_point(field_release:adb.proto.Device.bus_address)
  return _impl_.bus_address_.Release();
}
inline void Device::set_allocated_bus_address(std::string* bus_address) {
  if (bus_address != nullptr) {
    
  } else {
    
  }
  _impl_.bus_address_.SetAllocated(bus_address, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.bus_address_.IsDefault()) {
    _impl_.bus_address_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:adb.proto.Device.bus_address)
}

// string product = 4;
inline void Device::clear_product() {
  _impl_.product_.ClearToEmpty();
}
inline const std::string& Device::product() const {
  // @@protoc_insertion_point(field_get:adb.proto.Device.product)
  return _internal_product();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Device::set_product(ArgT0&& arg0, ArgT... args) {
 
 _impl_.product_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:adb.proto.Device.product)
}
inline std::string* Device::mutable_product() {
  std::string* _s = _internal_mutable_product();
  // @@protoc_insertion_point(field_mutable:adb.proto.Device.product)
  return _s;
}
inline const std::string& Device::_internal_product() const {
  return _impl_.product_.Get();
}
inline void Device::_internal_set_product(const std::string& value) {
  
  _impl_.product_.Set(value, GetArenaForAllocation());
}
inline std::string* Device::_internal_mutable_product() {
  
  return _impl_.product_.Mutable(GetArenaForAllocation());
}
inline std::string* Device::release_product() {
  // @@protoc_insertion_point(field_release:adb.proto.Device.product)
  return _impl_.product_.Release();
}
inline void Device::set_allocated_product(std::string* product) {
  if (product != nullptr) {
    
  } else {
    
  }
  _impl_.product_.SetAllocated(product, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.product_.IsDefault()) {
    _impl_.product_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:adb.proto.Device.product)
}

// string model = 5;
inline void Device::clear_model() {
  _impl_.model_.ClearToEmpty();
}
inline const std::string& Device::model() const {
  // @@protoc_insertion_point(field_get:adb.proto.Device.model)
  return _internal_model();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Device::set_model(ArgT0&& arg0, ArgT... args) {
 
 _impl_.model_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:adb.proto.Device.model)
}
inline std::string* Device::mutable_model() {
  std::string* _s = _internal_mutable_model();
  // @@protoc_insertion_point(field_mutable:adb.proto.Device.model)
  return _s;
}
inline const std::string& Device::_internal_model() const {
  return _impl_.model_.Get();
}
inline void Device::_internal_set_model(const std::string& value) {
  
  _impl_.model_.Set(value, GetArenaForAllocation());
}
inline std::string* Device::_internal_mutable_model() {
  
  return _impl_.model_.Mutable(GetArenaForAllocation());
}
inline std::string* Device::release_model() {
  // @@protoc_insertion_point(field_release:adb.proto.Device.model)
  return _impl_.model_.Release();
}
inline void Device::set_allocated_model(std::string* model) {
  if (model != nullptr) {
    
  } else {
    
  }
  _impl_.model_.SetAllocated(model, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.model_.IsDefault()) {
    _impl_.model_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:adb.proto.Device.model)
}

// string device = 6;
inline void Device::clear_device() {
  _impl_.device_.ClearToEmpty();
}
inline const std::string& Device::device() const {
  // @@protoc_insertion_point(field_get:adb.proto.Device.device)
  return _internal_device();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Device::set_device(ArgT0&& arg0, ArgT... args) {
 
 _impl_.device_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:adb.proto.Device.device)
}
inline std::string* Device::mutable_device() {
  std::string* _s = _internal_mutable_device();
  // @@protoc_insertion_point(field_mutable:adb.proto.Device.device)
  return _s;
}
inline const std::string& Device::_internal_device() const {
  return _impl_.device_.Get();
}
inline void Device::_internal_set_device(const std::string& value) {
  
  _impl_.device_.Set(value, GetArenaForAllocation());
}
inline std::string* Device::_internal_mutable_device() {
  
  return _impl_.device_.Mutable(GetArenaForAllocation());
}
inline std::string* Device::release_device() {
  // @@protoc_insertion_point(field_release:adb.proto.Device.device)
  return _impl_.device_.Release();
}
inline void Device::set_allocated_device(std::string* device) {
  if (device != nullptr) {
    
  } else {
    
  }
  _impl_.device_.SetAllocated(device, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.device_.IsDefault()) {
    _impl_.device_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:adb.proto.Device.device)
}

// .adb.proto.ConnectionType connection_type = 7;
inline void Device::clear_connection_type() {
  _impl_.connection_type_ = 0;
}
inline ::adb::proto::ConnectionType Device::_internal_connection_type() const {
  return static_cast< ::adb::proto::ConnectionType >(_impl_.connection_type_);
}
inline ::adb::proto::ConnectionType Device::connection_type() const {
  // @@protoc_insertion_point(field_get:adb.proto.Device.connection_type)
  return _internal_connection_type();
}
inline void Device::_internal_set_connection_type(::adb::proto::ConnectionType value) {
  
  _impl_.connection_type_ = value;
}
inline void Device::set_connection_type(::adb::proto::ConnectionType value) {
  _internal_set_connection_type(value);
  // @@protoc_insertion_point(field_set:adb.proto.Device.connection_type)
}

// int64 negotiated_speed = 8;
inline void Device::clear_negotiated_speed() {
  _impl_.negotiated_speed_ = int64_t{0};
}
inline int64_t Device::_internal_negotiated_speed() const {
  return _impl_.negotiated_speed_;
}
inline int64_t Device::negotiated_speed() const {
  // @@protoc_insertion_point(field_get:adb.proto.Device.negotiated_speed)
  return _internal_negotiated_speed();
}
inline void Device::_internal_set_negotiated_speed(int64_t value) {
  
  _impl_.negotiated_speed_ = value;
}
inline void Device::set_negotiated_speed(int64_t value) {
  _internal_set_negotiated_speed(value);
  // @@protoc_insertion_point(field_set:adb.proto.Device.negotiated_speed)
}

// int64 max_speed = 9;
inline void Device::clear_max_speed() {
  _impl_.max_speed_ = int64_t{0};
}
inline int64_t Device::_internal_max_speed() const {
  return _impl_.max_speed_;
}
inline int64_t Device::max_speed() const {
  // @@protoc_insertion_point(field_get:adb.proto.Device.max_speed)
  return _internal_max_speed();
}
inline void Device::_internal_set_max_speed(int64_t value) {
  
  _impl_.max_speed_ = value;
}
inline void Device::set_max_speed(int64_t value) {
  _internal_set_max_speed(value);
  // @@protoc_insertion_point(field_set:adb.proto.Device.max_speed)
}

// int64 transport_id = 10;
inline void Device::clear_transport_id() {
  _impl_.transport_id_ = int64_t{0};
}
inline int64_t Device::_internal_transport_id() const {
  return _impl_.transport_id_;
}
inline int64_t Device::transport_id() const {
  // @@protoc_insertion_point(field_get:adb.proto.Device.transport_id)
  return _internal_transport_id();
}
inline void Device::_internal_set_transport_id(int64_t value) {
  
  _impl_.transport_id_ = value;
}
inline void Device::set_transport_id(int64_t value) {
  _internal_set_transport_id(value);
  // @@protoc_insertion_point(field_set:adb.proto.Device.transport_id)
}

// -------------------------------------------------------------------

// Devices

// repeated .adb.proto.Device device = 1;
inline int Devices::_internal_device_size() const {
  return _impl_.device_.size();
}
inline int Devices::device_size() const {
  return _internal_device_size();
}
inline void Devices::clear_device() {
  _impl_.device_.Clear();
}
inline ::adb::proto::Device* Devices::mutable_device(int index) {
  // @@protoc_insertion_point(field_mutable:adb.proto.Devices.device)
  return _impl_.device_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::adb::proto::Device >*
Devices::mutable_device() {
  // @@protoc_insertion_point(field_mutable_list:adb.proto.Devices.device)
  return &_impl_.device_;
}
inline const ::adb::proto::Device& Devices::_internal_device(int index) const {
  return _impl_.device_.Get(index);
}
inline const ::adb::proto::Device& Devices::device(int index) const {
  // @@protoc_insertion_point(field_get:adb.proto.Devices.device)
  return _internal_device(index);
}
inline ::adb::proto::Device* Devices::_internal_add_device() {
  return _impl_.device_.Add();
}
inline ::adb::proto::Device* Devices::add_device() {
  ::adb::proto::Device* _add = _internal_add_device();
  // @@protoc_insertion_point(field_add:adb.proto.Devices.device)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::adb::proto::Device >&
Devices::device() const {
  // @@protoc_insertion_point(field_list:adb.proto.Devices.device)
  return _impl_.device_;
}

// -------------------------------------------------------------------

// AdbServerStatus

// .adb.proto.AdbServerStatus.UsbBackend usb_backend = 1;
inline void AdbServerStatus::clear_usb_backend() {
  _impl_.usb_backend_ = 0;
}
inline ::adb::proto::AdbServerStatus_UsbBackend AdbServerStatus::_internal_usb_backend() const {
  return static_cast< ::adb::proto::AdbServerStatus_UsbBackend >(_impl_.usb_backend_);
}
inline ::adb::proto::AdbServerStatus_UsbBackend AdbServerStatus::usb_backend() const {
  // @@protoc_insertion_point(field_get:adb.proto.AdbServerStatus.usb_backend)
  return _internal_usb_backend();
}
inline void AdbServerStatus::_internal_set_usb_backend(::adb::proto::AdbServerStatus_UsbBackend value) {
  
  _impl_.usb_backend_ = value;
}
inline void AdbServerStatus::set_usb_backend(::adb::proto::AdbServerStatus_UsbBackend value) {
  _internal_set_usb_backend(value);
  // @@protoc_insertion_point(field_set:adb.proto.AdbServerStatus.usb_backend)
}

// bool usb_backend_forced = 2;
inline void AdbServerStatus::clear_usb_backend_forced() {
  _impl_.usb_backend_forced_ = false;
}
inline bool AdbServerStatus::_internal_usb_backend_forced() const {
  return _impl_.usb_backend_forced_;
}
inline bool AdbServerStatus::usb_backend_forced() const {
  // @@protoc_insertion_point(field_get:adb.proto.AdbServerStatus.usb_backend_forced)
  return _internal_usb_backend_forced();
}
inline void AdbServerStatus::_internal_set_usb_backend_forced(bool value) {
  
  _impl_.usb_backend_forced_ = value;
}
inline void AdbServerStatus::set_usb_backend_forced(bool value) {
  _internal_set_usb_backend_forced(value);
  // @@protoc_insertion_point(field_set:adb.proto.AdbServerStatus.usb_backend_forced)
}

// .adb.proto.AdbServerStatus.MdnsBackend mdns_backend = 3;
inline void AdbServerStatus::clear_mdns_backend() {
  _impl_.mdns_backend_ = 0;
}
inline ::adb::proto::AdbServerStatus_MdnsBackend AdbServerStatus::_internal_mdns_backend() const {
  return static_cast< ::adb::proto::AdbServerStatus_MdnsBackend >(_impl_.mdns_backend_);
}
inline ::adb::proto::AdbServerStatus_MdnsBackend AdbServerStatus::mdns_backend() const {
  // @@protoc_insertion_point(field_get:adb.proto.AdbServerStatus.mdns_backend)
  return _internal_mdns_backend();
}
inline void AdbServerStatus::_internal_set_mdns_backend(::adb::proto::AdbServerStatus_MdnsBackend value) {
  
  _impl_.mdns_backend_ = value;
}
inline void AdbServerStatus::set_mdns_backend(::adb::proto::AdbServerStatus_MdnsBackend value) {
  _internal_set_mdns_backend(value);
  // @@protoc_insertion_point(field_set:adb.proto.AdbServerStatus.mdns_backend)
}

// bool mdns_backend_forced = 4;
inline void AdbServerStatus::clear_mdns_backend_forced() {
  _impl_.mdns_backend_forced_ = false;
}
inline bool AdbServerStatus::_internal_mdns_backend_forced() const {
  return _impl_.mdns_backend_forced_;
}
inline bool AdbServerStatus::mdns_backend_forced() const {
  // @@protoc_insertion_point(field_get:adb.proto.AdbServerStatus.mdns_backend_forced)
  return _internal_mdns_backend_forced();
}
inline void AdbServerStatus::_internal_set_mdns_backend_forced(bool value) {
  
  _impl_.mdns_backend_forced_ = value;
}
inline void AdbServerStatus::set_mdns_backend_forced(bool value) {
  _internal_set_mdns_backend_forced(value);
  // @@protoc_insertion_point(field_set:adb.proto.AdbServerStatus.mdns_backend_forced)
}

// string version = 5;
inline void AdbServerStatus::clear_version() {
  _impl_.version_.ClearToEmpty();
}
inline const std::string& AdbServerStatus::version() const {
  // @@protoc_insertion_point(field_get:adb.proto.AdbServerStatus.version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AdbServerStatus::set_version(ArgT0&& arg0, ArgT... args) {
 
 _impl_.version_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:adb.proto.AdbServerStatus.version)
}
inline std::string* AdbServerStatus::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:adb.proto.AdbServerStatus.version)
  return _s;
}
inline const std::string& AdbServerStatus::_internal_version() const {
  return _impl_.version_.Get();
}
inline void AdbServerStatus::_internal_set_version(const std::string& value) {
  
  _impl_.version_.Set(value, GetArenaForAllocation());
}
inline std::string* AdbServerStatus::_internal_mutable_version() {
  
  return _impl_.version_.Mutable(GetArenaForAllocation());
}
inline std::string* AdbServerStatus::release_version() {
  // @@protoc_insertion_point(field_release:adb.proto.AdbServerStatus.version)
  return _impl_.version_.Release();
}
inline void AdbServerStatus::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  _impl_.version_.SetAllocated(version, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.version_.IsDefault()) {
    _impl_.version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:adb.proto.AdbServerStatus.version)
}

// string build = 6;
inline void AdbServerStatus::clear_build() {
  _impl_.build_.ClearToEmpty();
}
inline const std::string& AdbServerStatus::build() const {
  // @@protoc_insertion_point(field_get:adb.proto.AdbServerStatus.build)
  return _internal_build();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AdbServerStatus::set_build(ArgT0&& arg0, ArgT... args) {
 
 _impl_.build_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:adb.proto.AdbServerStatus.build)
}
inline std::string* AdbServerStatus::mutable_build() {
  std::string* _s = _internal_mutable_build();
  // @@protoc_insertion_point(field_mutable:adb.proto.AdbServerStatus.build)
  return _s;
}
inline const std::string& AdbServerStatus::_internal_build() const {
  return _impl_.build_.Get();
}
inline void AdbServerStatus::_internal_set_build(const std::string& value) {
  
  _impl_.build_.Set(value, GetArenaForAllocation());
}
inline std::string* AdbServerStatus::_internal_mutable_build() {
  
  return _impl_.build_.Mutable(GetArenaForAllocation());
}
inline std::string* AdbServerStatus::release_build() {
  // @@protoc_insertion_point(field_release:adb.proto.AdbServerStatus.build)
  return _impl_.build_.Release();
}
inline void AdbServerStatus::set_allocated_build(std::string* build) {
  if (build != nullptr) {
    
  } else {
    
  }
  _impl_.build_.SetAllocated(build, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.build_.IsDefault()) {
    _impl_.build_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:adb.proto.AdbServerStatus.build)
}

// string executable_absolute_path = 7;
inline void AdbServerStatus::clear_executable_absolute_path() {
  _impl_.executable_absolute_path_.ClearToEmpty();
}
inline const std::string& AdbServerStatus::executable_absolute_path() const {
  // @@protoc_insertion_point(field_get:adb.proto.AdbServerStatus.executable_absolute_path)
  return _internal_executable_absolute_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AdbServerStatus::set_executable_absolute_path(ArgT0&& arg0, ArgT... args) {
 
 _impl_.executable_absolute_path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:adb.proto.AdbServerStatus.executable_absolute_path)
}
inline std::string* AdbServerStatus::mutable_executable_absolute_path() {
  std::string* _s = _internal_mutable_executable_absolute_path();
  // @@protoc_insertion_point(field_mutable:adb.proto.AdbServerStatus.executable_absolute_path)
  return _s;
}
inline const std::string& AdbServerStatus::_internal_executable_absolute_path() const {
  return _impl_.executable_absolute_path_.Get();
}
inline void AdbServerStatus::_internal_set_executable_absolute_path(const std::string& value) {
  
  _impl_.executable_absolute_path_.Set(value, GetArenaForAllocation());
}
inline std::string* AdbServerStatus::_internal_mutable_executable_absolute_path() {
  
  return _impl_.executable_absolute_path_.Mutable(GetArenaForAllocation());
}
inline std::string* AdbServerStatus::release_executable_absolute_path() {
  // @@protoc_insertion_point(field_release:adb.proto.AdbServerStatus.executable_absolute_path)
  return _impl_.executable_absolute_path_.Release();
}
inline void AdbServerStatus::set_allocated_executable_absolute_path(std::string* executable_absolute_path) {
  if (executable_absolute_path != nullptr) {
    
  } else {
    
  }
  _impl_.executable_absolute_path_.SetAllocated(executable_absolute_path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.executable_absolute_path_.IsDefault()) {
    _impl_.executable_absolute_path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:adb.proto.AdbServerStatus.executable_absolute_path)
}

// string log_absolute_path = 8;
inline void AdbServerStatus::clear_log_absolute_path() {
  _impl_.log_absolute_path_.ClearToEmpty();
}
inline const std::string& AdbServerStatus::log_absolute_path() const {
  // @@protoc_insertion_point(field_get:adb.proto.AdbServerStatus.log_absolute_path)
  return _internal_log_absolute_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AdbServerStatus::set_log_absolute_path(ArgT0&& arg0, ArgT... args) {
 
 _impl_.log_absolute_path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:adb.proto.AdbServerStatus.log_absolute_path)
}
inline std::string* AdbServerStatus::mutable_log_absolute_path() {
  std::string* _s = _internal_mutable_log_absolute_path();
  // @@protoc_insertion_point(field_mutable:adb.proto.AdbServerStatus.log_absolute_path)
  return _s;
}
inline const std::string& AdbServerStatus::_internal_log_absolute_path() const {
  return _impl_.log_absolute_path_.Get();
}
inline void AdbServerStatus::_internal_set_log_absolute_path(const std::string& value) {
  
  _impl_.log_absolute_path_.Set(value, GetArenaForAllocation());
}
inline std::string* AdbServerStatus::_internal_mutable_log_absolute_path() {
  
  return _impl_.log_absolute_path_.Mutable(GetArenaForAllocation());
}
inline std::string* AdbServerStatus::release_log_absolute_path() {
  // @@protoc_insertion_point(field_release:adb.proto.AdbServerStatus.log_absolute_path)
  return _impl_.log_absolute_path_.Release();
}
inline void AdbServerStatus::set_allocated_log_absolute_path(std::string* log_absolute_path) {
  if (log_absolute_path != nullptr) {
    
  } else {
    
  }
  _impl_.log_absolute_path_.SetAllocated(log_absolute_path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.log_absolute_path_.IsDefault()) {
    _impl_.log_absolute_path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:adb.proto.AdbServerStatus.log_absolute_path)
}

// string os = 9;
inline void AdbServerStatus::clear_os() {
  _impl_.os_.ClearToEmpty();
}
inline const std::string& AdbServerStatus::os() const {
  // @@protoc_insertion_point(field_get:adb.proto.AdbServerStatus.os)
  return _internal_os();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AdbServerStatus::set_os(ArgT0&& arg0, ArgT... args) {
 
 _impl_.os_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:adb.proto.AdbServerStatus.os)
}
inline std::string* AdbServerStatus::mutable_os() {
  std::string* _s = _internal_mutable_os();
  // @@protoc_insertion_point(field_mutable:adb.proto.AdbServerStatus.os)
  return _s;
}
inline const std::string& AdbServerStatus::_internal_os() const {
  return _impl_.os_.Get();
}
inline void AdbServerStatus::_internal_set_os(const std::string& value) {
  
  _impl_.os_.Set(value, GetArenaForAllocation());
}
inline std::string* AdbServerStatus::_internal_mutable_os() {
  
  return _impl_.os_.Mutable(GetArenaForAllocation());
}
inline std::string* AdbServerStatus::release_os() {
  // @@protoc_insertion_point(field_release:adb.proto.AdbServerStatus.os)
  return _impl_.os_.Release();
}
inline void AdbServerStatus::set_allocated_os(std::string* os) {
  if (os != nullptr) {
    
  } else {
    
  }
  _impl_.os_.SetAllocated(os, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.os_.IsDefault()) {
    _impl_.os_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:adb.proto.AdbServerStatus.os)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace adb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::adb::proto::AdbServerStatus_UsbBackend> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::adb::proto::AdbServerStatus_UsbBackend>() {
  return ::adb::proto::AdbServerStatus_UsbBackend_descriptor();
}
template <> struct is_proto_enum< ::adb::proto::AdbServerStatus_MdnsBackend> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::adb::proto::AdbServerStatus_MdnsBackend>() {
  return ::adb::proto::AdbServerStatus_MdnsBackend_descriptor();
}
template <> struct is_proto_enum< ::adb::proto::ConnectionState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::adb::proto::ConnectionState>() {
  return ::adb::proto::ConnectionState_descriptor();
}
template <> struct is_proto_enum< ::adb::proto::ConnectionType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::adb::proto::ConnectionType>() {
  return ::adb::proto::ConnectionType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_adb_5fhost_2eproto
