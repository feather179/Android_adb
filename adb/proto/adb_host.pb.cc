// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: adb_host.proto

#include "adb_host.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace adb {
namespace proto {
PROTOBUF_CONSTEXPR Device::Device(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.serial_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.bus_address_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.product_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.model_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.device_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.state_)*/0
  , /*decltype(_impl_.connection_type_)*/0
  , /*decltype(_impl_.negotiated_speed_)*/int64_t{0}
  , /*decltype(_impl_.max_speed_)*/int64_t{0}
  , /*decltype(_impl_.transport_id_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeviceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeviceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeviceDefaultTypeInternal() {}
  union {
    Device _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeviceDefaultTypeInternal _Device_default_instance_;
PROTOBUF_CONSTEXPR Devices::Devices(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.device_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DevicesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DevicesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DevicesDefaultTypeInternal() {}
  union {
    Devices _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DevicesDefaultTypeInternal _Devices_default_instance_;
PROTOBUF_CONSTEXPR AdbServerStatus::AdbServerStatus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.build_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.executable_absolute_path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.log_absolute_path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.os_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.usb_backend_)*/0
  , /*decltype(_impl_.mdns_backend_)*/0
  , /*decltype(_impl_.usb_backend_forced_)*/false
  , /*decltype(_impl_.mdns_backend_forced_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AdbServerStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AdbServerStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AdbServerStatusDefaultTypeInternal() {}
  union {
    AdbServerStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AdbServerStatusDefaultTypeInternal _AdbServerStatus_default_instance_;
}  // namespace proto
}  // namespace adb
static ::_pb::Metadata file_level_metadata_adb_5fhost_2eproto[3];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_adb_5fhost_2eproto[4];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_adb_5fhost_2eproto = nullptr;

const uint32_t TableStruct_adb_5fhost_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::adb::proto::Device, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::adb::proto::Device, _impl_.serial_),
  PROTOBUF_FIELD_OFFSET(::adb::proto::Device, _impl_.state_),
  PROTOBUF_FIELD_OFFSET(::adb::proto::Device, _impl_.bus_address_),
  PROTOBUF_FIELD_OFFSET(::adb::proto::Device, _impl_.product_),
  PROTOBUF_FIELD_OFFSET(::adb::proto::Device, _impl_.model_),
  PROTOBUF_FIELD_OFFSET(::adb::proto::Device, _impl_.device_),
  PROTOBUF_FIELD_OFFSET(::adb::proto::Device, _impl_.connection_type_),
  PROTOBUF_FIELD_OFFSET(::adb::proto::Device, _impl_.negotiated_speed_),
  PROTOBUF_FIELD_OFFSET(::adb::proto::Device, _impl_.max_speed_),
  PROTOBUF_FIELD_OFFSET(::adb::proto::Device, _impl_.transport_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::adb::proto::Devices, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::adb::proto::Devices, _impl_.device_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::adb::proto::AdbServerStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::adb::proto::AdbServerStatus, _impl_.usb_backend_),
  PROTOBUF_FIELD_OFFSET(::adb::proto::AdbServerStatus, _impl_.usb_backend_forced_),
  PROTOBUF_FIELD_OFFSET(::adb::proto::AdbServerStatus, _impl_.mdns_backend_),
  PROTOBUF_FIELD_OFFSET(::adb::proto::AdbServerStatus, _impl_.mdns_backend_forced_),
  PROTOBUF_FIELD_OFFSET(::adb::proto::AdbServerStatus, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::adb::proto::AdbServerStatus, _impl_.build_),
  PROTOBUF_FIELD_OFFSET(::adb::proto::AdbServerStatus, _impl_.executable_absolute_path_),
  PROTOBUF_FIELD_OFFSET(::adb::proto::AdbServerStatus, _impl_.log_absolute_path_),
  PROTOBUF_FIELD_OFFSET(::adb::proto::AdbServerStatus, _impl_.os_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::adb::proto::Device)},
  { 16, -1, -1, sizeof(::adb::proto::Devices)},
  { 23, -1, -1, sizeof(::adb::proto::AdbServerStatus)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::adb::proto::_Device_default_instance_._instance,
  &::adb::proto::_Devices_default_instance_._instance,
  &::adb::proto::_AdbServerStatus_default_instance_._instance,
};

const char descriptor_table_protodef_adb_5fhost_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016adb_host.proto\022\tadb.proto\"\377\001\n\006Device\022\016"
  "\n\006serial\030\001 \001(\t\022)\n\005state\030\002 \001(\0162\032.adb.prot"
  "o.ConnectionState\022\023\n\013bus_address\030\003 \001(\t\022\017"
  "\n\007product\030\004 \001(\t\022\r\n\005model\030\005 \001(\t\022\016\n\006device"
  "\030\006 \001(\t\0222\n\017connection_type\030\007 \001(\0162\031.adb.pr"
  "oto.ConnectionType\022\030\n\020negotiated_speed\030\010"
  " \001(\003\022\021\n\tmax_speed\030\t \001(\003\022\024\n\014transport_id\030"
  "\n \001(\003\",\n\007Devices\022!\n\006device\030\001 \003(\0132\021.adb.p"
  "roto.Device\"\242\003\n\017AdbServerStatus\022:\n\013usb_b"
  "ackend\030\001 \001(\0162%.adb.proto.AdbServerStatus"
  ".UsbBackend\022\032\n\022usb_backend_forced\030\002 \001(\010\022"
  "<\n\014mdns_backend\030\003 \001(\0162&.adb.proto.AdbSer"
  "verStatus.MdnsBackend\022\033\n\023mdns_backend_fo"
  "rced\030\004 \001(\010\022\017\n\007version\030\005 \001(\t\022\r\n\005build\030\006 \001"
  "(\t\022 \n\030executable_absolute_path\030\007 \001(\t\022\031\n\021"
  "log_absolute_path\030\010 \001(\t\022\n\n\002os\030\t \001(\t\"5\n\nU"
  "sbBackend\022\017\n\013UNKNOWN_USB\020\000\022\n\n\006NATIVE\020\001\022\n"
  "\n\006LIBUSB\020\002\"<\n\013MdnsBackend\022\020\n\014UNKNOWN_MDN"
  "S\020\000\022\013\n\007BONJOUR\020\001\022\016\n\nOPENSCREEN\020\002*\310\001\n\017Con"
  "nectionState\022\007\n\003ANY\020\000\022\016\n\nCONNECTING\020\001\022\017\n"
  "\013AUTHORIZING\020\002\022\020\n\014UNAUTHORIZED\020\003\022\020\n\014NOPE"
  "RMISSION\020\004\022\014\n\010DETACHED\020\005\022\013\n\007OFFLINE\020\006\022\016\n"
  "\nBOOTLOADER\020\007\022\n\n\006DEVICE\020\010\022\010\n\004HOST\020\t\022\014\n\010R"
  "ECOVERY\020\n\022\014\n\010SIDELOAD\020\013\022\n\n\006RESCUE\020\014*2\n\016C"
  "onnectionType\022\013\n\007UNKNOWN\020\000\022\007\n\003USB\020\001\022\n\n\006S"
  "OCKET\020\002B-\n\035com.android.server.adb.protos"
  "B\014DevicesProtob\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_adb_5fhost_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_adb_5fhost_2eproto = {
    false, false, 1062, descriptor_table_protodef_adb_5fhost_2eproto,
    "adb_host.proto",
    &descriptor_table_adb_5fhost_2eproto_once, nullptr, 0, 3,
    schemas, file_default_instances, TableStruct_adb_5fhost_2eproto::offsets,
    file_level_metadata_adb_5fhost_2eproto, file_level_enum_descriptors_adb_5fhost_2eproto,
    file_level_service_descriptors_adb_5fhost_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_adb_5fhost_2eproto_getter() {
  return &descriptor_table_adb_5fhost_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_adb_5fhost_2eproto(&descriptor_table_adb_5fhost_2eproto);
namespace adb {
namespace proto {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AdbServerStatus_UsbBackend_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_adb_5fhost_2eproto);
  return file_level_enum_descriptors_adb_5fhost_2eproto[0];
}
bool AdbServerStatus_UsbBackend_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr AdbServerStatus_UsbBackend AdbServerStatus::UNKNOWN_USB;
constexpr AdbServerStatus_UsbBackend AdbServerStatus::NATIVE;
constexpr AdbServerStatus_UsbBackend AdbServerStatus::LIBUSB;
constexpr AdbServerStatus_UsbBackend AdbServerStatus::UsbBackend_MIN;
constexpr AdbServerStatus_UsbBackend AdbServerStatus::UsbBackend_MAX;
constexpr int AdbServerStatus::UsbBackend_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AdbServerStatus_MdnsBackend_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_adb_5fhost_2eproto);
  return file_level_enum_descriptors_adb_5fhost_2eproto[1];
}
bool AdbServerStatus_MdnsBackend_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr AdbServerStatus_MdnsBackend AdbServerStatus::UNKNOWN_MDNS;
constexpr AdbServerStatus_MdnsBackend AdbServerStatus::BONJOUR;
constexpr AdbServerStatus_MdnsBackend AdbServerStatus::OPENSCREEN;
constexpr AdbServerStatus_MdnsBackend AdbServerStatus::MdnsBackend_MIN;
constexpr AdbServerStatus_MdnsBackend AdbServerStatus::MdnsBackend_MAX;
constexpr int AdbServerStatus::MdnsBackend_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConnectionState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_adb_5fhost_2eproto);
  return file_level_enum_descriptors_adb_5fhost_2eproto[2];
}
bool ConnectionState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConnectionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_adb_5fhost_2eproto);
  return file_level_enum_descriptors_adb_5fhost_2eproto[3];
}
bool ConnectionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Device::_Internal {
 public:
};

Device::Device(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:adb.proto.Device)
}
Device::Device(const Device& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Device* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.serial_){}
    , decltype(_impl_.bus_address_){}
    , decltype(_impl_.product_){}
    , decltype(_impl_.model_){}
    , decltype(_impl_.device_){}
    , decltype(_impl_.state_){}
    , decltype(_impl_.connection_type_){}
    , decltype(_impl_.negotiated_speed_){}
    , decltype(_impl_.max_speed_){}
    , decltype(_impl_.transport_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.serial_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serial_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_serial().empty()) {
    _this->_impl_.serial_.Set(from._internal_serial(), 
      _this->GetArenaForAllocation());
  }
  _impl_.bus_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bus_address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bus_address().empty()) {
    _this->_impl_.bus_address_.Set(from._internal_bus_address(), 
      _this->GetArenaForAllocation());
  }
  _impl_.product_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.product_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_product().empty()) {
    _this->_impl_.product_.Set(from._internal_product(), 
      _this->GetArenaForAllocation());
  }
  _impl_.model_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model().empty()) {
    _this->_impl_.model_.Set(from._internal_model(), 
      _this->GetArenaForAllocation());
  }
  _impl_.device_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.device_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_device().empty()) {
    _this->_impl_.device_.Set(from._internal_device(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.state_, &from._impl_.state_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.transport_id_) -
    reinterpret_cast<char*>(&_impl_.state_)) + sizeof(_impl_.transport_id_));
  // @@protoc_insertion_point(copy_constructor:adb.proto.Device)
}

inline void Device::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.serial_){}
    , decltype(_impl_.bus_address_){}
    , decltype(_impl_.product_){}
    , decltype(_impl_.model_){}
    , decltype(_impl_.device_){}
    , decltype(_impl_.state_){0}
    , decltype(_impl_.connection_type_){0}
    , decltype(_impl_.negotiated_speed_){int64_t{0}}
    , decltype(_impl_.max_speed_){int64_t{0}}
    , decltype(_impl_.transport_id_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.serial_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serial_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.bus_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bus_address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.product_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.product_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.model_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.device_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.device_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Device::~Device() {
  // @@protoc_insertion_point(destructor:adb.proto.Device)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Device::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.serial_.Destroy();
  _impl_.bus_address_.Destroy();
  _impl_.product_.Destroy();
  _impl_.model_.Destroy();
  _impl_.device_.Destroy();
}

void Device::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Device::Clear() {
// @@protoc_insertion_point(message_clear_start:adb.proto.Device)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.serial_.ClearToEmpty();
  _impl_.bus_address_.ClearToEmpty();
  _impl_.product_.ClearToEmpty();
  _impl_.model_.ClearToEmpty();
  _impl_.device_.ClearToEmpty();
  ::memset(&_impl_.state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.transport_id_) -
      reinterpret_cast<char*>(&_impl_.state_)) + sizeof(_impl_.transport_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Device::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string serial = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_serial();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "adb.proto.Device.serial"));
        } else
          goto handle_unusual;
        continue;
      // .adb.proto.ConnectionState state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::adb::proto::ConnectionState>(val));
        } else
          goto handle_unusual;
        continue;
      // string bus_address = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_bus_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "adb.proto.Device.bus_address"));
        } else
          goto handle_unusual;
        continue;
      // string product = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_product();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "adb.proto.Device.product"));
        } else
          goto handle_unusual;
        continue;
      // string model = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_model();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "adb.proto.Device.model"));
        } else
          goto handle_unusual;
        continue;
      // string device = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_device();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "adb.proto.Device.device"));
        } else
          goto handle_unusual;
        continue;
      // .adb.proto.ConnectionType connection_type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_connection_type(static_cast<::adb::proto::ConnectionType>(val));
        } else
          goto handle_unusual;
        continue;
      // int64 negotiated_speed = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.negotiated_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 max_speed = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.max_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 transport_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.transport_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Device::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:adb.proto.Device)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string serial = 1;
  if (!this->_internal_serial().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_serial().data(), static_cast<int>(this->_internal_serial().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "adb.proto.Device.serial");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_serial(), target);
  }

  // .adb.proto.ConnectionState state = 2;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_state(), target);
  }

  // string bus_address = 3;
  if (!this->_internal_bus_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bus_address().data(), static_cast<int>(this->_internal_bus_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "adb.proto.Device.bus_address");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_bus_address(), target);
  }

  // string product = 4;
  if (!this->_internal_product().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_product().data(), static_cast<int>(this->_internal_product().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "adb.proto.Device.product");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_product(), target);
  }

  // string model = 5;
  if (!this->_internal_model().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model().data(), static_cast<int>(this->_internal_model().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "adb.proto.Device.model");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_model(), target);
  }

  // string device = 6;
  if (!this->_internal_device().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device().data(), static_cast<int>(this->_internal_device().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "adb.proto.Device.device");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_device(), target);
  }

  // .adb.proto.ConnectionType connection_type = 7;
  if (this->_internal_connection_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_connection_type(), target);
  }

  // int64 negotiated_speed = 8;
  if (this->_internal_negotiated_speed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_negotiated_speed(), target);
  }

  // int64 max_speed = 9;
  if (this->_internal_max_speed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(9, this->_internal_max_speed(), target);
  }

  // int64 transport_id = 10;
  if (this->_internal_transport_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(10, this->_internal_transport_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:adb.proto.Device)
  return target;
}

size_t Device::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:adb.proto.Device)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string serial = 1;
  if (!this->_internal_serial().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_serial());
  }

  // string bus_address = 3;
  if (!this->_internal_bus_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bus_address());
  }

  // string product = 4;
  if (!this->_internal_product().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_product());
  }

  // string model = 5;
  if (!this->_internal_model().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model());
  }

  // string device = 6;
  if (!this->_internal_device().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device());
  }

  // .adb.proto.ConnectionState state = 2;
  if (this->_internal_state() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_state());
  }

  // .adb.proto.ConnectionType connection_type = 7;
  if (this->_internal_connection_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_connection_type());
  }

  // int64 negotiated_speed = 8;
  if (this->_internal_negotiated_speed() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_negotiated_speed());
  }

  // int64 max_speed = 9;
  if (this->_internal_max_speed() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_max_speed());
  }

  // int64 transport_id = 10;
  if (this->_internal_transport_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_transport_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Device::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Device::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Device::GetClassData() const { return &_class_data_; }


void Device::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Device*>(&to_msg);
  auto& from = static_cast<const Device&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:adb.proto.Device)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_serial().empty()) {
    _this->_internal_set_serial(from._internal_serial());
  }
  if (!from._internal_bus_address().empty()) {
    _this->_internal_set_bus_address(from._internal_bus_address());
  }
  if (!from._internal_product().empty()) {
    _this->_internal_set_product(from._internal_product());
  }
  if (!from._internal_model().empty()) {
    _this->_internal_set_model(from._internal_model());
  }
  if (!from._internal_device().empty()) {
    _this->_internal_set_device(from._internal_device());
  }
  if (from._internal_state() != 0) {
    _this->_internal_set_state(from._internal_state());
  }
  if (from._internal_connection_type() != 0) {
    _this->_internal_set_connection_type(from._internal_connection_type());
  }
  if (from._internal_negotiated_speed() != 0) {
    _this->_internal_set_negotiated_speed(from._internal_negotiated_speed());
  }
  if (from._internal_max_speed() != 0) {
    _this->_internal_set_max_speed(from._internal_max_speed());
  }
  if (from._internal_transport_id() != 0) {
    _this->_internal_set_transport_id(from._internal_transport_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Device::CopyFrom(const Device& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:adb.proto.Device)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Device::IsInitialized() const {
  return true;
}

void Device::InternalSwap(Device* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.serial_, lhs_arena,
      &other->_impl_.serial_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.bus_address_, lhs_arena,
      &other->_impl_.bus_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.product_, lhs_arena,
      &other->_impl_.product_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.model_, lhs_arena,
      &other->_impl_.model_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.device_, lhs_arena,
      &other->_impl_.device_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Device, _impl_.transport_id_)
      + sizeof(Device::_impl_.transport_id_)
      - PROTOBUF_FIELD_OFFSET(Device, _impl_.state_)>(
          reinterpret_cast<char*>(&_impl_.state_),
          reinterpret_cast<char*>(&other->_impl_.state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Device::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_adb_5fhost_2eproto_getter, &descriptor_table_adb_5fhost_2eproto_once,
      file_level_metadata_adb_5fhost_2eproto[0]);
}

// ===================================================================

class Devices::_Internal {
 public:
};

Devices::Devices(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:adb.proto.Devices)
}
Devices::Devices(const Devices& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Devices* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.device_){from._impl_.device_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:adb.proto.Devices)
}

inline void Devices::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.device_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Devices::~Devices() {
  // @@protoc_insertion_point(destructor:adb.proto.Devices)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Devices::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.device_.~RepeatedPtrField();
}

void Devices::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Devices::Clear() {
// @@protoc_insertion_point(message_clear_start:adb.proto.Devices)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.device_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Devices::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .adb.proto.Device device = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_device(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Devices::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:adb.proto.Devices)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .adb.proto.Device device = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_device_size()); i < n; i++) {
    const auto& repfield = this->_internal_device(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:adb.proto.Devices)
  return target;
}

size_t Devices::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:adb.proto.Devices)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .adb.proto.Device device = 1;
  total_size += 1UL * this->_internal_device_size();
  for (const auto& msg : this->_impl_.device_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Devices::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Devices::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Devices::GetClassData() const { return &_class_data_; }


void Devices::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Devices*>(&to_msg);
  auto& from = static_cast<const Devices&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:adb.proto.Devices)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.device_.MergeFrom(from._impl_.device_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Devices::CopyFrom(const Devices& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:adb.proto.Devices)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Devices::IsInitialized() const {
  return true;
}

void Devices::InternalSwap(Devices* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.device_.InternalSwap(&other->_impl_.device_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Devices::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_adb_5fhost_2eproto_getter, &descriptor_table_adb_5fhost_2eproto_once,
      file_level_metadata_adb_5fhost_2eproto[1]);
}

// ===================================================================

class AdbServerStatus::_Internal {
 public:
};

AdbServerStatus::AdbServerStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:adb.proto.AdbServerStatus)
}
AdbServerStatus::AdbServerStatus(const AdbServerStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AdbServerStatus* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.version_){}
    , decltype(_impl_.build_){}
    , decltype(_impl_.executable_absolute_path_){}
    , decltype(_impl_.log_absolute_path_){}
    , decltype(_impl_.os_){}
    , decltype(_impl_.usb_backend_){}
    , decltype(_impl_.mdns_backend_){}
    , decltype(_impl_.usb_backend_forced_){}
    , decltype(_impl_.mdns_backend_forced_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    _this->_impl_.version_.Set(from._internal_version(), 
      _this->GetArenaForAllocation());
  }
  _impl_.build_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.build_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_build().empty()) {
    _this->_impl_.build_.Set(from._internal_build(), 
      _this->GetArenaForAllocation());
  }
  _impl_.executable_absolute_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.executable_absolute_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_executable_absolute_path().empty()) {
    _this->_impl_.executable_absolute_path_.Set(from._internal_executable_absolute_path(), 
      _this->GetArenaForAllocation());
  }
  _impl_.log_absolute_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.log_absolute_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_log_absolute_path().empty()) {
    _this->_impl_.log_absolute_path_.Set(from._internal_log_absolute_path(), 
      _this->GetArenaForAllocation());
  }
  _impl_.os_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.os_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_os().empty()) {
    _this->_impl_.os_.Set(from._internal_os(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.usb_backend_, &from._impl_.usb_backend_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mdns_backend_forced_) -
    reinterpret_cast<char*>(&_impl_.usb_backend_)) + sizeof(_impl_.mdns_backend_forced_));
  // @@protoc_insertion_point(copy_constructor:adb.proto.AdbServerStatus)
}

inline void AdbServerStatus::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.version_){}
    , decltype(_impl_.build_){}
    , decltype(_impl_.executable_absolute_path_){}
    , decltype(_impl_.log_absolute_path_){}
    , decltype(_impl_.os_){}
    , decltype(_impl_.usb_backend_){0}
    , decltype(_impl_.mdns_backend_){0}
    , decltype(_impl_.usb_backend_forced_){false}
    , decltype(_impl_.mdns_backend_forced_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.build_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.build_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.executable_absolute_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.executable_absolute_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.log_absolute_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.log_absolute_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.os_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.os_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AdbServerStatus::~AdbServerStatus() {
  // @@protoc_insertion_point(destructor:adb.proto.AdbServerStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AdbServerStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.version_.Destroy();
  _impl_.build_.Destroy();
  _impl_.executable_absolute_path_.Destroy();
  _impl_.log_absolute_path_.Destroy();
  _impl_.os_.Destroy();
}

void AdbServerStatus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AdbServerStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:adb.proto.AdbServerStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.version_.ClearToEmpty();
  _impl_.build_.ClearToEmpty();
  _impl_.executable_absolute_path_.ClearToEmpty();
  _impl_.log_absolute_path_.ClearToEmpty();
  _impl_.os_.ClearToEmpty();
  ::memset(&_impl_.usb_backend_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.mdns_backend_forced_) -
      reinterpret_cast<char*>(&_impl_.usb_backend_)) + sizeof(_impl_.mdns_backend_forced_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AdbServerStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .adb.proto.AdbServerStatus.UsbBackend usb_backend = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_usb_backend(static_cast<::adb::proto::AdbServerStatus_UsbBackend>(val));
        } else
          goto handle_unusual;
        continue;
      // bool usb_backend_forced = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.usb_backend_forced_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .adb.proto.AdbServerStatus.MdnsBackend mdns_backend = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_mdns_backend(static_cast<::adb::proto::AdbServerStatus_MdnsBackend>(val));
        } else
          goto handle_unusual;
        continue;
      // bool mdns_backend_forced = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.mdns_backend_forced_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string version = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "adb.proto.AdbServerStatus.version"));
        } else
          goto handle_unusual;
        continue;
      // string build = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_build();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "adb.proto.AdbServerStatus.build"));
        } else
          goto handle_unusual;
        continue;
      // string executable_absolute_path = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_executable_absolute_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "adb.proto.AdbServerStatus.executable_absolute_path"));
        } else
          goto handle_unusual;
        continue;
      // string log_absolute_path = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_log_absolute_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "adb.proto.AdbServerStatus.log_absolute_path"));
        } else
          goto handle_unusual;
        continue;
      // string os = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_os();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "adb.proto.AdbServerStatus.os"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AdbServerStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:adb.proto.AdbServerStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .adb.proto.AdbServerStatus.UsbBackend usb_backend = 1;
  if (this->_internal_usb_backend() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_usb_backend(), target);
  }

  // bool usb_backend_forced = 2;
  if (this->_internal_usb_backend_forced() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_usb_backend_forced(), target);
  }

  // .adb.proto.AdbServerStatus.MdnsBackend mdns_backend = 3;
  if (this->_internal_mdns_backend() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_mdns_backend(), target);
  }

  // bool mdns_backend_forced = 4;
  if (this->_internal_mdns_backend_forced() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_mdns_backend_forced(), target);
  }

  // string version = 5;
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "adb.proto.AdbServerStatus.version");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_version(), target);
  }

  // string build = 6;
  if (!this->_internal_build().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_build().data(), static_cast<int>(this->_internal_build().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "adb.proto.AdbServerStatus.build");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_build(), target);
  }

  // string executable_absolute_path = 7;
  if (!this->_internal_executable_absolute_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_executable_absolute_path().data(), static_cast<int>(this->_internal_executable_absolute_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "adb.proto.AdbServerStatus.executable_absolute_path");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_executable_absolute_path(), target);
  }

  // string log_absolute_path = 8;
  if (!this->_internal_log_absolute_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_log_absolute_path().data(), static_cast<int>(this->_internal_log_absolute_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "adb.proto.AdbServerStatus.log_absolute_path");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_log_absolute_path(), target);
  }

  // string os = 9;
  if (!this->_internal_os().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_os().data(), static_cast<int>(this->_internal_os().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "adb.proto.AdbServerStatus.os");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_os(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:adb.proto.AdbServerStatus)
  return target;
}

size_t AdbServerStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:adb.proto.AdbServerStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string version = 5;
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // string build = 6;
  if (!this->_internal_build().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_build());
  }

  // string executable_absolute_path = 7;
  if (!this->_internal_executable_absolute_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_executable_absolute_path());
  }

  // string log_absolute_path = 8;
  if (!this->_internal_log_absolute_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_log_absolute_path());
  }

  // string os = 9;
  if (!this->_internal_os().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_os());
  }

  // .adb.proto.AdbServerStatus.UsbBackend usb_backend = 1;
  if (this->_internal_usb_backend() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_usb_backend());
  }

  // .adb.proto.AdbServerStatus.MdnsBackend mdns_backend = 3;
  if (this->_internal_mdns_backend() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_mdns_backend());
  }

  // bool usb_backend_forced = 2;
  if (this->_internal_usb_backend_forced() != 0) {
    total_size += 1 + 1;
  }

  // bool mdns_backend_forced = 4;
  if (this->_internal_mdns_backend_forced() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AdbServerStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AdbServerStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AdbServerStatus::GetClassData() const { return &_class_data_; }


void AdbServerStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AdbServerStatus*>(&to_msg);
  auto& from = static_cast<const AdbServerStatus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:adb.proto.AdbServerStatus)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  if (!from._internal_build().empty()) {
    _this->_internal_set_build(from._internal_build());
  }
  if (!from._internal_executable_absolute_path().empty()) {
    _this->_internal_set_executable_absolute_path(from._internal_executable_absolute_path());
  }
  if (!from._internal_log_absolute_path().empty()) {
    _this->_internal_set_log_absolute_path(from._internal_log_absolute_path());
  }
  if (!from._internal_os().empty()) {
    _this->_internal_set_os(from._internal_os());
  }
  if (from._internal_usb_backend() != 0) {
    _this->_internal_set_usb_backend(from._internal_usb_backend());
  }
  if (from._internal_mdns_backend() != 0) {
    _this->_internal_set_mdns_backend(from._internal_mdns_backend());
  }
  if (from._internal_usb_backend_forced() != 0) {
    _this->_internal_set_usb_backend_forced(from._internal_usb_backend_forced());
  }
  if (from._internal_mdns_backend_forced() != 0) {
    _this->_internal_set_mdns_backend_forced(from._internal_mdns_backend_forced());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AdbServerStatus::CopyFrom(const AdbServerStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:adb.proto.AdbServerStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdbServerStatus::IsInitialized() const {
  return true;
}

void AdbServerStatus::InternalSwap(AdbServerStatus* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_, lhs_arena,
      &other->_impl_.version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.build_, lhs_arena,
      &other->_impl_.build_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.executable_absolute_path_, lhs_arena,
      &other->_impl_.executable_absolute_path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.log_absolute_path_, lhs_arena,
      &other->_impl_.log_absolute_path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.os_, lhs_arena,
      &other->_impl_.os_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AdbServerStatus, _impl_.mdns_backend_forced_)
      + sizeof(AdbServerStatus::_impl_.mdns_backend_forced_)
      - PROTOBUF_FIELD_OFFSET(AdbServerStatus, _impl_.usb_backend_)>(
          reinterpret_cast<char*>(&_impl_.usb_backend_),
          reinterpret_cast<char*>(&other->_impl_.usb_backend_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AdbServerStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_adb_5fhost_2eproto_getter, &descriptor_table_adb_5fhost_2eproto_once,
      file_level_metadata_adb_5fhost_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace adb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::adb::proto::Device*
Arena::CreateMaybeMessage< ::adb::proto::Device >(Arena* arena) {
  return Arena::CreateMessageInternal< ::adb::proto::Device >(arena);
}
template<> PROTOBUF_NOINLINE ::adb::proto::Devices*
Arena::CreateMaybeMessage< ::adb::proto::Devices >(Arena* arena) {
  return Arena::CreateMessageInternal< ::adb::proto::Devices >(arena);
}
template<> PROTOBUF_NOINLINE ::adb::proto::AdbServerStatus*
Arena::CreateMaybeMessage< ::adb::proto::AdbServerStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::adb::proto::AdbServerStatus >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
